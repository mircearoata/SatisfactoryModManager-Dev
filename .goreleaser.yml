project_name: SatisfactoryModManager

before:
  hooks:
    - go generate -x -tags tools ./...
    - go mod tidy

    # Apparently only wails build generates the embedded directory
    - mkdir -p frontend/build
    - touch frontend/build/.gitkeep

    - wails generate module
    - pnpm -C frontend install
    - pnpm -C frontend build

### Build

builds:
  - id: standalone

    targets:
      - linux_amd64
      - darwin_universal

    gobinary: task
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=standalone

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings

  
  - id: package-manager

    goos:
      - linux
    goarch:
      - amd64

    gobinary: task
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=package-manager

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings

  - id: nsis

    binary: SatisfactoryModManager-Setup # This name must match the nsis script OutFile, so the installer overwrites the wails built exe

    goos:
      - windows
    goarch:
      - amd64

    gobinary: task
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=nsis

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings
      - -nsis

### Package

archives:
  - id: windows-nsis
    builds:
      - nsis
    format: binary
    name_template: SatisfactoryModManager-Setup

  - id: standalone
    builds:
      - standalone
    format: binary
    name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if eq .Os "darwin" }}.zip{{ end }}'

checksum:
  name_template: 'checksums.txt'

### Release

snapshot:
  name_template: '{{ .Version }}+{{ if ne .Branch "master" }}{{ .Branch }}.{{ end }}{{ .ShortCommit }}'

release:  
  draft: true
  name_template: "{{.ProjectName}} v{{.Version}}"
  
  # Include all artifacts: windows-nsis, standalone

  header: |
    ## Installation
    Download and run `SatisfactoryModManager-Setup.exe` (Windows) or `SatisfactoryModManager_linux_win64` (Linux)
    If you already have Satisfactory Mod Manager installed, you don't need to download it again, it will auto-update.
